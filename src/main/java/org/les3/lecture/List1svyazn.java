package org.les3.lecture;
// ОДНОСВЯЗНЫЙ СПИСОК
public class List1svyazn {
    Node head; // Лист содержит ссылку на первую позицию для односвязного списка
               // Технически конец может быть, но от него нет смысла, если не
            // добавлять элементы ссылаясь на хвост, к примеру работа с очередями

// Упростим функцию перевызовом. Так же нужно учитывать, если нет элементов
//или он оди, то разворачивать нечего
    public void revert(){
        if(head != null && head.next != null) {
            Node temp = head; // Создаем временую Ноду и помещаем туда Head
            revert(head.next, head);
            temp.next = null;
        }
    }


// Разворот в односвязном списке происходит с помощью рекурсии, так как есть
// ссылка только на следующий элемент
    // В аргументах ссылки на текущую и предидущую Ноду
    public void revert(Node currentNode, Node previousNode){
        // Как только дошли до конца списка, и увидели что следующего элемента нет,
        // то последний элемент записываем как голову
        if(currentNode.next == null)
            head = currentNode;
        // если элемент есть, то запускаем рекурсию с аргументами, где текущий
            // будет next, а предыдущее значение становится текущий currentNode
        else
            revert(currentNode.next, currentNode);
        // И запускаем операцию замены ссылок, тем самым запустили обратное значение
        currentNode.next = previousNode;

    }

    public  class Node{
        int value; // Можно хранить любые переменные
        Node next; // Делеаем ссылку на следующий Node для организации односвязного списка
        // Односвязный список обойти с конца не возможно, так как нет ссылки на
        // предидущее значение

    }
}
