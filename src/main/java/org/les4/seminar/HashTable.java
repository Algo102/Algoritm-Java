package org.les4.seminar;
// реализация односвязного списка
//1. Начинаем реализацию хэш-таблицы с подготовки структуры и
//необходимых классов.
//2. Давайте напишем реализацию односвязного списка, в котором мы
//и будем хранить пары ключ-значение.
//3. Стоит обратить внимание, что можно использовать как дженерики,
//для обобщения возможных типов ключей и значений, так и заранее определить для
// себя конкретные типы, которые будут использоваться в качестве ключа и значения.
// Оба подхода допустимы для реализации.

//1. Добавляем массив связных списков с фиксированным размером (массив бакетов), либо
//передаваемым в конструкторе.
//2. Хэш-таблица оперирует индексами, потому массив будет идеальным вариантов для
// представления бакетов.
//3. Также реализуем метод вычисления индекса на основании хэш-кода ключа.


public class HashTable<K, V> {
    // создали константу
    public static final Integer FISK_BASKET_SIZE=16;

    // создаем массив из корзин
    public Basket[] basketArray;

    public HashTable(Integer size){
        this.basketArray = (Basket[]) new Object[size];
    }

    public HashTable(){
        this.basketArray = (Basket[]) new Object[FISK_BASKET_SIZE];
    }



    // создали корзину







}
